parameters:
  name: rust_msrv
  type: string

steps:
  # Setup
  # ============
  # Configure environment
  #

  # Use cargo install path
  - script: echo "##vso[task.setvariable variable=PATH;]$PATH:/usr/local/cargo/bin"
    displayName: set path

  # Give builder access to cached rust install
  - script: sudo chown -R AzDevOps /usr/local/cargo /usr/local/rustup
    displayName: chown cargo dir

  # Get the package version
  - script: echo "##vso[task.setvariable variable=version]$(make version)"
    displayName: package version

  - template: install-rust.yml
    parameters:
      version: ${{ parameters.rust_msrv }}

  # QA Steps
  # ========
  #

  # Check code formatting differences
  - script: cargo fmt --all -- --check
    displayName: check fmt

  # Build project
  # First, with the minimum supported rust version
  - script: cargo +${{ parameters.rust_msrv }} build --workspace --all-targets --all-features --release --locked
    displayName: build (msrv)

  # Then, with stable
  - script: cargo build --workspace --all-targets --all-features --release --locked
    displayName: build (stable)

  # Check linting warnings
  # Run clippy with MSRV so it does not error on lints which are MSRV incompatible such as std API changes
  - script: cargo +${{ parameters.rust_msrv }} clippy --workspace --all-targets --all-features --locked -- -D warnings
    displayName: check clippy

  # Build documentation
  - script: cargo doc --workspace --all-features --no-deps --locked
    displayName: cargo doc

  # Publish documentation
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: target/doc
      includeRootFolder: false
      archiveType: tar
      tarCompression: gz
      archiveFile: $(Build.ArtifactStagingDirectory)/sawp-doc-$(version).tar.gz
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/sawp-doc-$(version).tar.gz
      artifactName: sawp-$(version).tar.gz

  # Run the unit tests
  - script: cargo test --workspace --all-targets --all-features --locked
    displayName: run tests

  # Run the memory checks
  - script: make memcheck
    displayName: memcheck

  # Run the doc tests
  # Needed until this issue is fixed: https://github.com/rust-lang/cargo/issues/6669
  - script: cargo test --workspace --doc --all-features --locked
    displayName: run doc tests

  # Check code coverage
  - script: |
      OUTPUT=$(cargo tarpaulin -v --all --all-features --out Xml)
      echo "${OUTPUT}"

      if [[ $(echo "${OUTPUT}" | tail -1 | cut -d ' ' -f 1) < 75 ]]
      then
          echo "Coverage does not meet required percentage"
          exit 1
      fi
    continueOnError: true
    displayName: check code coverage

  # Publish the code coverage reports
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: cobertura.xml

  # Check if cargo publish would pass
  - script: cargo publish --dry-run --locked
    displayName: check publish
