parameters:
  - name: src
    displayName: Source Branch
    type: string
    default: main
  - name: dest
    displayName: Destination Branch
    type: string
    default: staging
  - name: package
    displayName: Use --package <package> or --workspace to release all packages
    type: string
    default: --workspace
  - name: level
    displayName: Level (major|minor|patch|rc|alpha|beta|release|<version>)
    type: string
    default: rc
  - name: args
    displayName: Cargo Release Extra Args
    type: string
    default: --no-confirm --no-push --no-publish --execute
  - name: name
    displayName: Author Name
    type: string
    default: sa-sawp
  - name: email
    displayName: Author Email
    type: string
    default: sa-sawp@cyber.gc.ca
  - name: deploy
    displayName: 'Deploy rpm to repo?'
    type: boolean
    default: true

variables:
- name: rpm_dir
  value: target/rpmbuild/RPMS/x86_64/
- name: rust_msrv
  value: 1.63.0

trigger: none
pr: none

resources:
- repo: self

jobs:
- job: release_sawp
  displayName: Release SAWP
  pool: $(pool)
  steps:
    # Setup
    # ============
    # Configure environment
    #

    # git >= 2.0 is required
    - script: echo "##vso[task.setvariable variable=PATH;]/opt/rh/sclo-git25/root/usr/bin:$PATH"
      displayName: set path

    # SAWP Steps
    # ==============
    - checkout: self
      clean: true
      path: sawp
      persistCredentials: true

    # Configure author to commit release with
    - script: git config user.name ${{ parameters.name }}
    - script: git config user.email ${{ parameters.email }}

    # The src branch is the code you want to release -- e.g. main
    # The dest branch is where you want the code to go -- e.g. staging
    - script: git remote update origin
      displayName: update
    - script: git checkout ${{ parameters.dest }} && git pull --ff-only origin ${{ parameters.dest }} && git merge --ff-only origin/${{ parameters.src }} || git checkout -b ${{ parameters.dest }} origin/${{ parameters.src }}
      displayName: merge

    # Check all contributors are in .contributors list
    - script: chmod +x ./.contributors.sh && ./.contributors.sh -r ${{ parameters.dest }}
      displayName: contributors

    # QA Checks
    # ==============
    - template: qa-steps.yml
      parameters:
        rust_msrv: ${{ variables.rust_msrv }}

    # Release
    # ==============

    # Commit and tag the release
    - script: cargo release ${{ parameters.package }} ${{ parameters.args }} -- ${{ parameters.level }}
      displayName: cargo release

    # Don't push with cargo release because it will fail
    - script: git push --follow-tags origin ${{ parameters.dest }}

    # Release Artifacts
    # ==============
    - template: package-steps.yml

    # Push RPM to repository
    - template: deploy-rpm-steps.yml
      parameters:
        service_connection: $(rpm_service_connection)
        source_folder: $(rpm_dir)
        source_contents: "*.rpm"
        target_folder: $(rpm_repo_dir)
        deploy: ${{ parameters.deploy }}
